# -*- coding=UTF-8 -*-
# 处理unit的png素材, 切片, 重命名
import os, png;
resPath = 'map\\{}.png'
tmxFile = 'map\\{:0>3}.tmx'
hexzFile = 'res\\HEXZMAP.{:0>3}'
newPNG = 'map\\new.png'
outputPngFile = 'map\\slice\\{}-{:0>3}.png'
outputTxtFile = 'map\\slice\\{}.txt'
totalNum = 5

# 去重复, 生成一个新的图, 给出旧->新的对应关系
# mapping = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,213,214,215,216,217,218,219,220,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,6,252,253,254,255,256,365,366,367,368,221,222,223,224,6,6,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,448,449,213,214,215,216,217,218,219,220,221,222,223,224,450,451,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,414,415,416,417,418,419,420,421,422,423,479,480,481,424,425,426,427,428,429,430,431,432,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,450,451,534,535,536,213,214,215,216,217,218,219,220,221,222,223,224,537,538,539,540,541,542,254,255,256,365,366,6,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,213,214,215,216,217,218,219,220,94,95,96,97,98,99,100,101,102,103,104,105,543,544,545,546,547,548,549,550,551,552,553,554,450,451,534,535,536,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,448,449,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,221,222,223,224,252,253,254,255,256,365,366,367,368,450,451,534,535,536,367)
mapping = [1, 2, 3, 4, 5, 6, 20, 21, 22, 30, 32, 40, 41, 42, 23, 24, 25, 33, 35, 43, 44, 45, 26, 27, 36, 37, 28, 29, 38, 39, 210, 211, 212, 220, 221, 222, 230, 231, 232, 213, 214, 215, 223, 224, 225, 233, 234, 235, 143, 144, 145, 153, 154, 155, 163, 164, 165, 140, 141, 142, 150, 151, 152, 160, 161, 162, 460, 461, 462, 470, 471, 472, 480, 481, 482, 463, 464, 465, 473, 474, 475, 483, 484, 485, 466, 467, 468, 476, 477, 478, 486, 487, 488, 110, 111, 112, 120, 122, 130, 131, 132, 113, 114, 123, 124, 157, 158, 147, 148, 136, 137, 138, 139, 149, 159, 169, 168, 167, 166, 126, 116, 127, 117, 58, 68, 78, 88, 98, 108, 118, 59, 69, 89, 99, 109, 119, 506, 507, 508, 509, 496, 497, 498, 499, 500, 501, 502, 503, 510, 511, 512, 513, 531, 533, 520, 521, 522, 523, 524, 543, 553, 563, 490, 491, 492, 493, 537, 547, 557, 516, 517, 526, 527, 554, 544, 534, 548, 538, 552, 562, 530, 540, 550, 560, 541, 551, 561, 542, 536, 546, 556, 518, 519, 528, 529, 555, 545, 535, 549, 539, 55, 56, 57, 85, 86, 87, 95, 97, 67, 65, 75, 77, 50, 51, 52, 60, 62, 70, 71, 72, 53, 54, 63, 64, 243, 244, 245, 253, 254, 255, 263, 264, 265, 246, 247, 256, 257, 277, 287, 297, 307, 276, 286, 296, 306, 278, 288, 298, 308, 10, 125, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 20, 21, 22, 30, 32, 40, 41, 42, 23, 24, 25, 33, 35, 43, 44, 45, 26, 27, 36, 37, 28,
29, 38, 39, 210, 211, 212, 220, 221, 222, 230, 231, 232, 213, 214, 215, 223, 224, 225, 233, 234, 235, 143, 144, 145, 153, 154, 155, 163, 164, 165, 140, 141, 142, 150, 151, 152, 160, 161, 162, 460, 461, 462, 470, 471, 472, 480, 481, 482, 463, 464, 465, 473, 474, 475, 483, 484, 485, 466, 467, 468, 476, 477, 478, 486, 487, 488, 110, 111, 112, 120, 122, 130, 131, 132, 113, 114, 123, 124, 176, 186, 177, 187, 178, 188, 197, 198, 208, 199, 209, 195, 205, 196, 206, 175, 185, 189, 50, 51, 52, 60, 62, 70, 71, 72, 581, 582, 583, 584, 591, 592, 593, 594, 601, 602, 603, 604, 611, 612, 613, 614, 571, 572, 573, 574, 595, 605, 615, 623, 622, 621, 600, 590, 577,
587, 597, 607, 617, 578, 588, 598, 608, 618, 579, 589, 157, 158, 147, 148, 136, 137, 138, 139, 149, 159, 169, 168, 167, 166, 126, 116, 127, 117, 125, 641, 642, 643, 644, 651, 652, 653, 654, 661, 662, 663, 664, 671, 672, 673, 674, 631, 632, 633, 634, 655, 665, 675, 683, 682, 681, 660, 650, 691, 692, 693, 694, 715, 725, 735, 743, 742, 741, 720, 710, 637, 647, 657, 667, 677, 638, 648, 658, 668, 678, 6, 11, 12, 13, 14, 15, 16, 697, 18,

167, 166, 126, 116, 127, 117, 125, 243, 244, 245, 253, 254, 255, 263, 264, 265, 246, 247, 256, 257, 277, 287, 297, 307, 276, 286, 296, 306, 278, 288, 298, 308, 10, 267, 270, 271, 272, 280, 281, 282, 290, 291, 292, 300, 301, 302, 273, 274, 275, 283, 284, 285, 293, 294, 295, 303, 304, 305, 310, 311, 312, 320, 321, 322, 266, 313, 314, 323, 324, 333, 334, 216, 217, 218, 226, 227, 228, 236, 237, 238, 240, 241, 242, 250, 251, 252, 343, 344, 345, 353, 354, 355, 363, 364, 365, 346, 347, 348, 356, 357, 358, 366, 367, 368, 316, 317, 318, 326, 327, 328, 336, 337, 338, 340, 341, 342, 350, 351, 352, 360, 361, 362, 46, 47, 48, 49, 9, 50, 51, 52, 60, 62, 70, 71, 72, 53, 54, 63, 64, 315, 325, 335, 330, 331, 332, 13, 14, 15, 16, 697, 6, 1, 2, 3, 4, 5, 6, 20, 21, 22, 30, 32, 40, 41, 42, 23, 24, 25, 33, 35, 43, 44, 45, 26, 27, 36, 37, 28, 29, 38, 39, 210, 211, 212, 220, 221, 222, 230, 231, 232, 213, 214, 215, 223, 224, 225, 233, 234, 235, 143, 144, 145, 153, 154, 155, 163, 164, 165, 140, 141, 142, 150, 151, 152, 160, 161, 162, 400, 401, 402, 410, 411, 412, 420, 421, 422, 403, 404, 405, 413, 414, 415, 423, 424, 425, 406, 407, 408, 416, 417, 418, 426, 427, 428, 157, 158, 147, 148, 136, 137, 138, 139, 149, 159, 169, 168, 167, 166, 126, 116, 127, 117, 125, 171, 181, 172, 182, 173, 183, 192, 193, 203, 194, 204, 190, 200, 191, 201, 170, 180, 184, 50, 51, 52, 60, 62, 70, 71, 72, 110, 111, 112, 120, 122, 130, 131, 132, 113, 114, 123, 124, 80, 81, 82, 90, 92, 100, 101, 102, 83, 84, 93, 94, 46, 47, 48, 49, 9, 641, 642, 643, 644,
651, 652, 653, 654, 661, 662, 663, 664, 671, 672, 673, 674, 631, 632, 633, 634, 655, 665, 675, 683, 682, 681, 660, 650, 691, 692, 693, 694, 715, 725, 735, 743, 742, 741, 720, 710, 637, 647, 657, 667, 677, 638, 648, 658, 668, 678, 639, 649, 370, 371, 372, 380, 381, 382, 390, 391, 392, 373, 374, 375, 383, 384, 385, 393, 394, 395, 53, 54, 63, 64, 11, 12, 13, 14, 15, 16, 697, 18, 17, 46, 47, 48, 49, 9, 18]
tmxTemplate = '''<?xml version="1.0" encoding="UTF-8"?>
<map version="1.0" tiledversion="1.1.6" orientation="orthogonal" renderorder="left-up" width="{}" height="{}" tilewidth="16" tileheight="16" infinite="0" nextobjectid="1">
 <tileset firstgid="0" source="tile.tsx"/>
 <tileset firstgid="1001" source="terrain.tsx"/>
 <layer name="map" width="{}" height="{}">
  <data encoding="csv">
{}
  </data>
 </layer>
 <layer name="terrain" width="{}" height="{}" visible="0">
  <data encoding="csv">
{}
  </data>
 </layer>
</map>'''
# png
# for pid in range(totalNum):
#     fileName = resPath.format(pid)
#     print('handle file', fileName)
#     p = png.Reader(fileName).read()
#     width = p[0]
#     height = p[1]
#     palette = p[3]['palette']
#     print(width, height, p[3])
#     subPng = [ [] for i in range(256)]
#     r = 0
    # for row in p[2]:
    #     for i in range(8):
    #         subPng[ 8 * (r // 16) + i ].append( row[ 16*i : 16*(i+1) ] )
    #     r += 1
    # output = open(outputTxtFile.format(pid), 'w')
    # for subPngId in range(256):
    #     output.write('{}-{:0>3d}: '.format(pid, subPngId))
    #     output.write('|'.join(
    #         ['|'.join('{}'.format(v) for v in sub) for sub in subPng[subPngId]]
    #     ))
    #     output.write('\n')
    #     with open(outputPngFile.format(pid, subPngId), 'wb') as f:
    #         # print(subPng[subPngId])
    #         png.Writer(16, 16, alpha=False, palette=palette).write(f, subPng[subPngId]);
    # output.close()


def exportTMX(id):
    tileCSV = ''
    terrainCSV = ''
    with open(hexzFile.format(id), 'rb') as f:
        style = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
        width = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
        height = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
        for row in range(height):
            for col in range(width):
                pic = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
                pic += 256 * style
                newPic = mapping[pic]
                tileCSV += '{},'.format(newPic + 0)
            tileCSV += '\n'
        for row in range(height//3):
            rowCSV = ''
            for col in range(width//3):
                ter = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
                ter += 1001
                rowCSV += '{},{},{},'.format(ter, ter, ter)
            rowCSV += '\n'
            terrainCSV += rowCSV + rowCSV + rowCSV

    with open(tmxFile.format(id + 1), 'w') as f:
        f.write(tmxTemplate.format(width, height, width, height, tileCSV[0:-2], width, height, terrainCSV[0:-2]))

# terrain = [ [ 0 for j in range(24) ] for i in range(750) ]
# def analyseTerrain(id):
#     with open(hexzFile.format(id), 'rb') as f:
#         style = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
#         width = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
#         height = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
#         f.seek(width * height, 1)
#         t = []
#         for row in range(height//3):
#             for col in range(width//3):
#                 ter = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
#                 address = f.tell()
#                 f.seek(width * row * 3 + col * 3 + 3 + width + 1)
#                 pic = int.from_bytes(f.read(1), byteorder = 'little', signed = False)
#                 f.seek(address)
#                 pic += 256 * style
#                 newPic = mapping[pic]
#                 terrain[newPic][ter] += 1
# for id in range(55):
#     analyseTerrain(id)
# print(terrain)



#导出tmx文件
for id in range(55):
    exportTMX(id)

# 生成tile图集图片
# output = [ [ 35 for j in range(160)] for i in range(1200)]
# for pid in range(totalNum):
#     fileName = resPath.format(pid)
#     print('handle file', fileName)
#     p = png.Reader(fileName).read()
#     palette = p[3]['palette']
#     r = 0
#     for row in p[2]:
#         for i in range(8):
#             oldID = 256 * pid + 8 * (r // 16) + i
#             newID = mapping[oldID]
#             newRow = 16 * (newID // 10) + r % 16
#             newCol = 16 * (newID % 10)
#             output[newRow][newCol : newCol + 16] = row[16*i : 16*(i+1)]
#         r += 1

# with open(newPNG, 'wb') as f:
#     png.Writer(160, 1200, alpha=False, palette=palette).write(f, output);



# swf
# print('handle swf')
# for pid in range(totalNum):
#     flStr = '1\n10, 100, 100\n'
#     offset = 50 - size[pid] // 2
#     for act in range(8):
#         picId = info[pid][act]
#         if picId == 0 and act > 4:
#             picId = info[pid][4]
#         if picId > 0:
#             for d in range(8):
#                 flStr += '\nDA={:0>2}\n'.format(act * 10 + d)
#                 for frame in range(8):
#                     lapse = 1
#                     if act > 1 and frame == 7:
#                         lapse = -1
#                     flStr += '5603{:0>4x}, {}, {}, {}\n'.format(picId, lapse, offset, offset)
#                     picId += 1
#     with open(outputSwfFile.format(pid+1), 'wt', newline='\n') as f:
#         f.write(flStr);

# mp1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,213,214,215,216,217,218,219,220,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,6,252,253,254,255,256,365,366,367,368,221,222,223,224,6,6,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,448,449,213,214,215,216,217,218,219,220,221,222,223,224,450,451,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,414,415,416,417,418,419,420,421,422,423,479,480,481,424,425,426,427,428,429,430,431,432,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,450,451,534,535,536,213,214,215,216,217,218,219,220,221,222,223,224,537,538,539,540,541,542,254,255,256,365,366,6,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,251,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,213,214,215,216,217,218,219,220,94,95,96,97,98,99,100,101,102,103,104,105,543,544,545,546,547,548,549,550,551,552,553,554,450,451,534,535,536,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,448,449,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,221,222,223,224,252,253,254,255,256,365,366,367,368,450,451,534,535,536,367]
# mp2 = [1,2,3,4,5,6,7,1,1,537,
# 251,253,254,255,256,257,366,369,368,1,
# 8,9,10,16,17,18,24,25,28,29,
# 11,1,12,19,1,20,26,27,30,31,
# 13,14,15,21,22,23,451,452,535,536,
# 214,215,216,222,223,202,203,204,125,132,
# 217,1,218,224,225,211,1,210,126,133,
# 219,220,221,1,1,212,1,213,127,1,
# 544,545,546,552,553,205,206,207,128,134,
# 547,1,548,554,555,208,1,209,129,135,
# 549,550,551,1,1,1,1,1,130,136,
# 95,96,97,103,104,1,122,124,131,137,
# 98,1,99,105,106,252,121,123,1,1,
# 100,101,102,1,1,1,111,112,113,114,
# 59,60,61,50,51,52,122,109,110,115,
# 62,63,64,53,54,55,121,107,108,116,
# 65,66,67,56,57,58,120,119,118,117,
# 412,397,399,401,1,273,258,260,262,1,
# 413,398,400,402,414,274,259,261,263,275,
# 408,410,403,404,406,269,271,264,265,267,
# 409,411,1,405,407,270,272,1,266,268,
# 32,33,34,41,42,43,434,435,436,1,
# 35,36,37,44,45,46,437,438,439,1,
# 38,39,40,47,48,49,440,441,442,1,
# 443,444,445,226,227,228,235,236,1,1,
# 446,447,448,229,230,231,237,238,1,1,
# 1,1,1,232,233,234,492,415,1,1,
# 416,417,418,425,426,427,243,239,247,1,
# 419,420,421,428,429,430,244,240,248,1,
# 422,423,424,431,432,433,245,241,249,1,
# 480,481,482,483,484,485,246,242,250,1,
# 486,487,488,493,494,538,517,518,519,1,
# 489,490,491,495,496,539,520,521,522,1,
# 541,542,543,497,498,540,523,524,525,1,
# 526,527,528,499,500,501,508,509,510,1,
# 529,530,531,502,503,504,511,512,513,1,
# 532,533,534,505,506,507,514,515,516,1,
# 556,557,558,565,566,567,1,1,1,1,
# 559,560,561,568,569,570,1,1,1,1,
# 562,563,564,571,572,573,1,1,1,1,
# 370,371,372,379,380,381,388,389,390,1,
# 373,374,375,382,383,384,391,392,393,1,
# 376,377,378,385,386,387,394,395,396,1,
# 453,454,455,462,463,464,471,472,473,1,
# 456,457,458,465,466,467,474,475,476,1,
# 459,460,461,468,469,470,477,478,479,1,
# 68,69,70,77,78,79,86,87,88,1,
# 71,72,73,80,81,82,89,90,91,1,
# 74,75,76,83,84,85,92,93,94,1,
# 164,165,166,167,1,1,142,143,144,145,
# 146,147,148,149,1,1,138,139,140,141,
# 150,151,152,153,1,1,171,172,193,194,
# 156,157,158,159,160,1,173,174,195,196,
# 182,154,1,155,177,199,190,168,179,201,
# 183,186,189,161,176,198,191,169,178,200,
# 184,187,180,162,175,197,192,170,1,1,
# 185,188,181,163,1,1,1,1,1,1,
# 1,292,293,294,295,1,1,304,309,314,
# 1,276,277,278,279,1,1,305,310,315,
# 303,280,281,282,283,296,1,306,311,1,
# 302,284,285,286,287,297,1,307,312,1,
# 1,288,289,290,291,298,1,308,313,1,
# 1,301,300,299,1,1,1,1,1,1,
# 1,332,333,334,335,1,1,356,361,449,
# 1,316,317,318,319,1,1,357,362,450,
# 343,320,321,322,323,336,1,358,363,1,
# 342,324,325,326,327,337,1,359,364,1,
# 1,328,329,330,331,338,1,360,365,1,
# 1,341,340,339,1,1,1,1,1,1,
# 1,344,345,346,347,1,1,367,1,1,
# 1,1,1,1,1,1,1,1,1,1,
# 355,1,1,1,1,348,1,1,1,1,
# 354,1,1,1,1,349,1,1,1,1,
# 1,1,1,1,1,350,1,1,1,1,
# 1,353,352,351,1,1,1,1,1,1]
# mp3 = []
# for a in mp1:
#     n = 0
#     for b in mp2:
#         if a == b - 1:
#             mp3.append(n)
#             break
#         n += 1
#     if n == len(mp2):
#         print(a)